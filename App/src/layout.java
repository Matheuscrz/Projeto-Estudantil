
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.FileReader;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.jfree.data.category.DefaultCategoryDataset;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Matheuscrz
 */
public class layout extends javax.swing.JFrame {

    /**
     * Creates new form layout
     */
    public layout() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        input = new javax.swing.JPanel();
        data = new javax.swing.JTextField();
        botao = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Painel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        input.setPreferredSize(new java.awt.Dimension(800, 600));

        data.setFont(new java.awt.Font("Fira Sans", 1, 18)); // NOI18N
        data.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataActionPerformed(evt);
            }
        });

        botao.setFont(new java.awt.Font("Fira Sans", 1, 18)); // NOI18N
        botao.setText("Gerar");
        botao.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Fira Sans", 1, 13)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Digite o nome do Curso sem Acento");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        Painel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout PainelLayout = new javax.swing.GroupLayout(Painel);
        Painel.setLayout(PainelLayout);
        PainelLayout.setHorizontalGroup(
            PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 697, Short.MAX_VALUE)
        );
        PainelLayout.setVerticalGroup(
            PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 302, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout inputLayout = new javax.swing.GroupLayout(input);
        input.setLayout(inputLayout);
        inputLayout.setHorizontalGroup(
            inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(data, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botao, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100))
            .addGroup(inputLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(Painel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
        );
        inputLayout.setVerticalGroup(
            inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botao)
                    .addComponent(data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(120, 120, 120)
                .addComponent(Painel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        data.getAccessibleContext().setAccessibleParent(null);
        botao.getAccessibleContext().setAccessibleName("");
        botao.getAccessibleContext().setAccessibleParent(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(input, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(input, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Ação não utilizada
     * @param evt 
     */
    private void dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dataActionPerformed
    /**
     * 
     * @param evt 
     * Executa todo o processo de chamada de funçôes e leitura de dados para gerar o Grafico e tratar erro.
     */
    private void botaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoActionPerformed
        String curso = data.getText().toUpperCase();
        List<String> listCurse = new ArrayList<>(); //Lista que recebera todos cursos do JSON
        List<Double> notas = new ArrayList<>();
        JSONParser jsonParser = new JSONParser();
        try(FileReader reader = new FileReader("Data.json")){
            Object obj = jsonParser.parse(reader); //Função que ler o JSON
            JSONArray dataArray = (JSONArray) obj; 
            dataArray.forEach(dado -> listaCurso((JSONObject)dado, listCurse));
            if(verificaCurso(listCurse,curso)){
                notas.clear();
                dataArray.forEach(dado -> parserProgram((JSONObject)dado, curso, notas));
                Intervalo(notas, nClasses(notas));
                JOptionPane.showMessageDialog(null, "Notas:" + notas);
            }else {
                JOptionPane.showMessageDialog(null, "Curso não encontrado!");
            }
        }catch(Exception e) { 
            JOptionPane.showMessageDialog(null, "Ocorreu um erro Inesperado:" + e);
        }
    }//GEN-LAST:event_botaoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(layout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(layout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(layout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(layout.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new layout().setVisible(true);
        });
    }
    
    /**
     * 
     * @param data
     * @param input
     * @param aux 
     * Função que gera uma lista que contém as notas correspondentes a uma key passada 
     */
    private static void parserProgram(JSONObject data, String input, List<Double> aux){
        Double temp;
        if(input.equals(data.getOrDefault("CURSO", input))){
            temp = Double.parseDouble(data.get("NOTA").toString());
            aux.add(temp);
        }
    }
    /**
     * 
     * @param data
     * @param cursos 
     * Cria uma lista de curso que será utilizada
     */
    private static void listaCurso(JSONObject data, List<String> cursos){
        String auxS;
        auxS = (String) data.get("CURSO");
        cursos.add(auxS);
    }
    /**
     * 
     * @param cursos
     * @param input
     * @return Verfica se o valor de entrada corresponde a algum valor do banco de dados local
     *
     */
    private static boolean verificaCurso(List<String> cursos, String input){
        for(String value : cursos) {
            if(input.equals(value)) return true;
        }
        return false;
    }
    /**
     * 
     * @param notas
     * @param nClasse
     * @return O valor do intervalo entre duas Classes 
     * Utilizado soma as notas criando um intervalo de Classes
     */
    private static double Intervalo(List<Double> notas, int nClasse) {
        //Maior valor
        Double maxValue = 0d;
        for(Double value: notas){
            if(value > maxValue) maxValue = value;
        }
        //Menor valor
        Double minValue = maxValue;
        for(Double value: notas){
            if(value < minValue) minValue = value;
        }
        //(Maior - Menor) / nClasses
        double interv = (maxValue - minValue)/nClasse;
        BigDecimal bd = new BigDecimal(interv).setScale(2, RoundingMode.HALF_EVEN);
        return bd.doubleValue();
    }
    /**
     * 
     * @param notas
     * @return O número de classes que compoe o Eixo X do grafico.
     * Número de Colunas do Grafico
     */
    private static int nClasses(List<Double> notas) {
        double prov = Math.round(Math.sqrt(notas.size()));
        return (int) prov;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Painel;
    private javax.swing.JButton botao;
    private javax.swing.JTextField data;
    private javax.swing.JPanel input;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
